# ===================================================================
# Spring Boot configuration for the "prod" profile.
#
# This configuration overrides the application.yml file.
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8061/eureka/

logging:
  level:
    ROOT: INFO
    tech.jhipster: INFO
    com.saltlux.deepsignal: INFO

management:
  metrics:
    export:
      prometheus:
        enabled: false

spring:
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    #    url: jdbc:mariadb://192.168.2.141:3306/deepsignal?useLegacyDatetimeCode=false&serverTimezone=UTC
    #    username: root
    #    password: IBgroup!pass
    url: jdbc:mariadb://13.21.34.43:3306/deepsignal_dev?useLegacyDatetimeCode=false&serverTimezone=UTC
    username: root
    password: ceres123
    hikari:
      poolName: Hikari
      auto-commit: false
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
  rabbitmq:
    host: 192.168.10.12
    port: 5672
    username: deepsignal
    password: deeppass22
  jpa:
  # Replace by 'prod, faker' to add the faker context and have sample data loaded in production
  liquibase:
    contexts: prod
  mail:
    host: smtp.office365.com
    port: 587
    username: deepsignaldatareport@saltlux.com
    password: Deep!wjqthr
    protocol: smtp
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
  thymeleaf:
    cache: true
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB

# ===================================================================
# To enable TLS in production, generate a certificate using:
# keytool -genkey -alias deepsignal -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# https://maximilian-boehm.com/hp2121/Create-a-Java-Keystore-JKS-from-Let-s-Encrypt-Certificates.htm
#
# Then, modify the server.ssl properties so your "server" configuration looks like:
#
# server:
#   port: 443
#   ssl:
#     key-store: classpath:config/tls/keystore.p12
#     key-store-password: password
#     key-store-type: PKCS12
#     key-alias: selfsigned
#     # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
#     ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
# ===================================================================
server:
  port: 8081
  shutdown: graceful # see https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-graceful-shutdown
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css, application/javascript, application/json
    min-response-size: 1024

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  http:
    cache: # Used by the CachingHttpHeadersFilter
      timeToLiveInDays: 1461
  cache: # Cache configuration
    redis: # Redis configuration
      expiration: 3600 # By default objects stay 1 hour (in seconds) in the cache
      #      server: redis://localhost:6379
      #      cluster: false
      #      server: redis://localhost:7000,redis://localhost:7001,redis://localhost:7002
      server: redis://no-username:elqtlrmsjf!@13.21.34.201:6379
      cluster: false
  cors:
    # Allow Ionic for JHipster by default (* no longer allowed in Spring Boot 2.4+)
    allowed-origins: 'http://localhost:8100,https://localhost:8100,http://localhost:9000,https://localhost:9000,http://localhost:9060,https://localhost:9060'
    allowed-methods: '*'
    allowed-headers: '*'
    exposed-headers: 'Authorization,Link,X-Total-Count,X-${jhipster.clientApp.name}-alert,X-${jhipster.clientApp.name}-error,X-${jhipster.clientApp.name}-params'
    allow-credentials: false
    max-age: 1800
  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 and be at least 256 bits long (you can type `openssl rand -base64 64` on your command line to generate a 512 bits one)
        # As this is the PRODUCTION configuration, you MUST change the default key, and store it securely:
        # - In the JHipster Registry (which includes a Spring Cloud Config server)
        # - In a separate `application-prod.yml` file, in the same folder as your executable JAR file
        # - In the `JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET` environment variable
        base64-secret: Y2ZlYmY1NzI5N2I1OTk2ZjcwOGY3NWUxYmEzZDNlNmQzYzkyNTRmZTRlMWY2NGI2MzEzNzA4YzFmOTAxMzkyZDkxMzUyNGFlZGU4MjIzZDU5ZGRmZjJhOWNlMjYwN2MwZDJlYWY2YTZjYWM1N2UxMDBmNDkzZjAzYTY0NGE3ZTY=
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 2592000
  mail: # specific JHipster mail property, for standard properties see MailProperties
    base-url: http://my-server-url-to-change # Modify according to your server's URL
    from: support@deepsignal.ai
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      host: localhost
      port: 5000
      queue-size: 512
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

application:
  security:
    jwt:
      token-issuer: Deepsignal
      token-audience: Deepsignal
      token-refresh-limit: 15
    login:
      max-failed-login: 5
      lock-time-duration: 300000 # milliseconds
  files-upload:
    location: '/Users/thienha/mnt/analytics/deepsignal/download'
    max-size: 10
    url-file: http://localhost:8080/api/file
  external-api:
    deepsignal-adapter: http://localhost:8082/api
    deepsignal-outside: http://192.168.10.12:8080
    deepsignal-file: http://192.168.10.12:8089
    deepsignal-connectome: http://192.168.10.14:8301
    deepsignal-entity-network: http://192.168.10.14:8304
    deepsignal-stock: http://192.168.10.14:8083
    deepsignal-toolbox: http://192.168.10.18:5555
    deepsignal-dashboard: http://192.168.10.18:1113
    deepsignal-metasearch: http://34.69.56.245:80
    deepsignal-doc-converter: http://35.223.20.10
    deepsignal-issue-tracking: http://192.168.9.219:8077
    deepsignal-trend-timeseries: http://35.239.167.117
    deepsignal-related-content: http://192.168.9.220:8077
  twilio:
    account_sid: ACcb944a769aaf8713147e64abbff39436
    auth_token: 4c176fa8de127632a8200a6573be9938
    sender_number: 14079880919
    length_code: 6
    expired_time: 3
  user-activity:
    number-thread-consumer: 1
    full-queue-waiting-time: 1
    empty-queue-waiting-time: 1
  rabbit-config:
    notification:
      exchange-name: deepsignal.exchange.prod
      queue-name: deepsignal.notification.prod
      router-key: deepsignal.key.prod.#
    web-logging:
      exchange-name: web.logged.in.exchange
      queue-name: web.logged.in
      router-key: web.logged.in.key.#
    feed-training:
      exchange-name: recommendation.connectome.completed
      queue-name: recommendation.connectome.completed
      router-key: recommendation.connectome.completed.#
    connectome-training:
      exchange-name: connectome.training.completed
      queue-name: connectome.training.completed
      router-key: connectome.training.completed.#
    signal-tracking:
      exchange-name: signal.issuetracking.completed
      queue-name: signal.issuetracking.completed
      router-key: signal.issuetracking.completed.#
